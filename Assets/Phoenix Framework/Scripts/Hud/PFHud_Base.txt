-- Register the behaviour
behaviour("PFHud_Base")
function PFHud_Base:Start()
	m_HudBase = self

	-- Stash objects
	self.spareAmmoText = self.targets.spareAmmoText.gameObject.GetComponent(TextMeshProUGUI)
	self.currentAmmoText = self.targets.currentAmmoText.gameObject.GetComponent(TextMeshProUGUI)
	self.firemodeText = self.targets.firemodeText.gameObject.GetComponent(TextMeshProUGUI)
	self.healthText = self.targets.healthText.gameObject.GetComponent(TextMeshProUGUI)
	self.vehicleHealthText = self.targets.vehicleHealthText.gameObject.GetComponent(TextMeshProUGUI)
	self.weaponNameText = self.targets.weaponNameText.gameObject.GetComponent(TextMeshProUGUI)
	self.vehicleNameText = self.targets.vehicleNameText.gameObject.GetComponent(TextMeshProUGUI)

	self.bloodVignette = self.targets.bloodVignette.gameObject.GetComponent(Image)
	self.vehicleHealth = self.targets.vehicleHealth.gameObject
	
	self.animator = self.gameObject.GetComponent(Animator)
	self.stateValue = 0
	self.currentState = false
	
	self.rfHitmarker = GameObject.Find("Hitmarker").gameObject.GetComponent(RawImage)
	self.hitmarker = self.targets.hitmarker.gameObject

	self.ammo = self.targets.ammo.gameObject

	self.hitmarker.GetComponent(RawImage).texture = self.rfHitmarker.texture

	self.canvasGroup = self.gameObject.GetComponent(CanvasGroup)

	-- Add value monitor
	self.script.AddValueMonitor("MonitorCurrentAmmo", "OnAmmoChange")
	self.script.AddValueMonitor("MonitorSpareAmmo", "OnSpareAmmoChange")
	self.script.AddValueMonitor("MonitorHUD", "OnHudChange")
	self.script.AddValueMonitor("MonitorHealth", "OnHealthChange")
	self.script.AddValueMonitor("MonitorVehicleHealth", "OnVehicleHealthChange")
	self.script.AddValueMonitor("MonitorHitmarker", "OnHitmarkerChange")
	-- self.script.AddValueMonitor("MonitorWeaponName", "OnWeaponNameChange")

	GameManager.hudPlayerEnabled = false
end

-- Event functions
function PFHud_Base:Update()
	self.animator.SetFloat("Blend", self.stateValue, 0.18, Time.unscaledDeltaTime)

	if Input.GetKeyDown(KeyCode.End) then
		self.gameObject.GetComponent(Canvas).enabled = not self.gameObject.GetComponent(Canvas).enabled
	end
end

-- Event Functions
function PFHud_Base:OnAmmoChange(ammo) 
	if ammo == -1 or ammo == -2 then self.currentAmmoText.text = "∞" return end
	if ammo == -5 then self.ammo.SetActive(false) return end

	self.ammo.SetActive(true)
	self.currentAmmoText.text = tostring(ammo) 
end

function PFHud_Base:OnSpareAmmoChange(spareAmmo)
	if spareAmmo == -1 or spareAmmo == -2 then self.spareAmmoText.text = "∞" return end
	self.spareAmmoText.text = tostring(spareAmmo) 
end

function PFHud_Base:OnHudChange(bool) GameManager.hudPlayerEnabled = false end

function PFHud_Base:OnHealthChange(health)
	self.healthText.text = tostring(health) 
	self.bloodVignette.color = Color(1, 1, 1, PhoenixMath.Normalize(health, 0, 40, 0.5, 0)) 
end

function PFHud_Base:OnVehicleHealthChange(vehicleHealth)
	if vehicleHealth == nil then
		self.vehicleHealth.SetActive(false)
		return
	end
	self.vehicleHealth.SetActive(true)
	self.vehicleHealthText.text = tostring(Mathf.FloorToInt(vehicleHealth))
	self.vehicleNameText.text = Player.actor.activeVehicle.name
end

function PFHud_Base:OnHitmarkerChange(bool)
	self.hitmarker.SetActive(bool)
end

-- Monitor Functions
function PFHud_Base:MonitorCurrentAmmo()
	local player = Player.actor
	if player.isDead or player.isSwimming or player.isFallenOver or player.isInWater or player.isOnLadder or not player.activeVehicle == nil then return 0 end

	if Player.actor.activeWeapon == nil then return -5 end
	return Player.actor.activeWeapon.ammo
end

function PFHud_Base:MonitorSpareAmmo()
	local player = Player.actor
	if player.isDead or player.isSwimming or player.isFallenOver or player.isInWater or player.isOnLadder or not player.activeVehicle == nil then return 0 end

	if Player.actor.activeWeapon == nil then return -5 end
	return Player.actor.activeWeapon.spareAmmo 
end

function PFHud_Base:MonitorHealth()
	local player = Player.actor
	if player == nil or player.isDead then return 0 end
	return Mathf.Clamp(Mathf.FloorToInt(Player.actor.health), 0, 999)
end

function PFHud_Base:MonitorVehicleHealth()
	if Player.actor.activeVehicle == nil then return nil end
	return Player.actor.activeVehicle.health
end

function PFHud_Base:MonitorHitmarker()
	return self.rfHitmarker.IsActive()
end

-- Other
function PFHud_Base:OnWeaponChange()
	local player = Player.actor
	if player.isDead or player.isSwimming or player.isFallenOver or player.isInWater or player.isOnLadder or not player.activeVehicle == nil then return end
	self:FiremodeText()
	self.weaponNameText.text = Player.actor.activeWeapon.weaponEntry.name
end

function PFHud_Base:MonitorHUD() return GameManager.hudPlayerEnabled end

function PFHud_Base:FiremodeText()
	local state = {
		-- Is Auto
		["true"] = function (self)
			self.firemodeText.text = "[AUTO]" 
		end,
		-- Is Single
		["false"] = function (self)
			self.firemodeText.text = "[SINGLE]" 
		end
	}
	state[tostring(Player.actor.activeWeapon.isAuto)](self)
end

function PFHud_Base:FadeUI(stateBool)
	local state = {
		["true"] = function (self)
			self.stateValue = 1
			self.currentState = true
		end,
		["false"] = function (self)
			self.stateValue = 0
			self.currentState = false
		end
	}
	state[tostring(stateBool)](self)
end