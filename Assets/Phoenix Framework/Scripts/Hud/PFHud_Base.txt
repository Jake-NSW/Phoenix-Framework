-- Register the behaviour
behaviour("PFHud_Base")


function PFHud_Base:Start()
	-- Stash objects
	self.spareAmmoText = self.targets.spareAmmoText.gameObject.GetComponent(TextMeshProUGUI)
	self.currentAmmoText = self.targets.currentAmmoText.gameObject.GetComponent(TextMeshProUGUI)

	self.animator = self.gameObject.GetComponent(Animator)
	self.stateValue = 1
	self.currentState = true

	self.canvasGroup = self.gameObject.GetComponent(CanvasGroup)

	-- Add value monitor
	self.script.AddValueMonitor("MonitorCurrentAmmo", "OnAmmoChange")
	self.script.AddValueMonitor("MonitorSpareAmmo", "OnSpareAmmoChange")
	self.script.AddValueMonitor("MonitorHUD", "OnHudChange")

	GameManager.hudPlayerEnabled = false
end

function PFHud_Base:Update()
	self.animator.SetFloat("Blend", self.stateValue, 0.25, Time.unscaledDeltaTime)
end

-- Event Functions
function PFHud_Base:OnAmmoChange(ammo)
	self.currentAmmoText.text = tostring(ammo)
end

function PFHud_Base:OnSpareAmmoChange(spareAmmo)
	self.spareAmmoText.text = tostring(spareAmmo)
end

-- For RF Hud
function PFHud_Base:OnHudChange(bool)
	GameManager.hudPlayerEnabled = false
end

-- Monitor Functions
function PFHud_Base:MonitorCurrentAmmo()
	local player = Player.actor
	if player.isDead or player.isSwimming or player.isFallenOver or player.isInWater or player.isOnLadder or not player.activeVehicle == nil then return end

	return Player.actor.activeWeapon.ammo 
end
function PFHud_Base:MonitorSpareAmmo()
	local player = Player.actor
	if player.isDead or player.isSwimming or player.isFallenOver or player.isInWater or player.isOnLadder or not player.activeVehicle == nil then return end

	return Player.actor.activeWeapon.spareAmmo 
end

function PFHud_Base:MonitorHUD()
	return GameManager.hudPlayerEnabled
end

function PFHud_Base:FadeUI(stateBool)
	local state = {
		["true"] = function (self)
			self.stateValue = 1
			self.currentState = true
		end,
		["false"] = function (self)
			self.stateValue = 0
			self.currentState = false
		end
	}
	state[tostring(stateBool)](self)
end