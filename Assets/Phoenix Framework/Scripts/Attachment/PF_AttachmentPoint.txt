-- Register the behaviour
behaviour("PF_AttachmentPoint")

local AttachmentPointBase = {
	EquipAttachment = function (self, attachmentIndex)
		local attachmentType = {
			["sights"] = function (selfVar, attachment) -- Sights shiets
			end,
		
			["muzzles"] = function (selfVar, attachment) -- isLoud and muzzle flash visibilty
			end,
		
			["toggleableRail"] = function(selfVar, attachment) -- Toggleable Rail, when pressing x it either enables or disables the rail power
			end,
		
			["stock"] = function (selfVar, attachment) -- Changes recoil and aimin speed
			end,
		
			["underbarrel"] = function (selfVar, attachment) -- Controls followup spread
			end,
		
			["mag"] = function (selfVar, attachment) -- Changes player movement speed and ammo count
			end,
		
			["skin"] = function (selfVar, attachment) -- Changes weapon material... Will finish later
			end,
		
			["receiver"] = function (selfVar, attachment) -- Does nothing?
			end,
		
			["nil"] = function (selfVar, attachment) -- Does nothing lol, stupid ass modder cant even set up an attachment correctly
			end
		}


	end,

	OnWeaponChange = function (self)
		local bindTable = {
			["1"] = KeyCode.Alpha1,
			["2"] = KeyCode.Alpha2,
			["3"] = KeyCode.Alpha3,
			["4"] = KeyCode.Alpha4,
			["5"] = KeyCode.Alpha5,
			["6"] = KeyCode.Alpha6,
			["7"] = KeyCode.Alpha7,
			["8"] = KeyCode.Alpha8,
			["9"] = KeyCode.Alpha9,
			["0"] = KeyCode.Alpha0,
		}

		local flipped = PhoenixData.GetBool(self.weaponPoint.gameObject.GetComponent(DataContainer), "flipped", false, false)
		local pointData = self.weaponPoint.gameObject.GetComponent(DataContainer)

		if flipped then 
			PhoenixData.GetGameObject(self.targets.right.gameObject.GetComponent(DataContainer), "pointName", false, nil).gameObject.GetComponent(TextMeshProUGUI).text = "[".. tostring(PhoenixData.GetInt(pointData, "bind", false, 1)) .."] " .. PhoenixData.GetString(pointData, "pointName", false, "Yooo Setup ya gun")
			self.targets.left.gameObject.SetActive(false)
			self.targets.right.gameObject.SetActive(true)
		else
			PhoenixData.GetGameObject(self.targets.left.gameObject.GetComponent(DataContainer), "pointName", false, nil).gameObject.GetComponent(TextMeshProUGUI).text = PhoenixData.GetString(pointData, "pointName", false, "Yooo Setup ya gun") .. " [".. tostring(PhoenixData.GetInt(pointData, "bind", false, 1)) .."]"
			self.targets.left.gameObject.SetActive(true)
			self.targets.right.gameObject.SetActive(false)
		end

		self.bind = bindTable[tostring(PhoenixData.GetInt(pointData, "bind", false, 1))]

		-- Storage Stuff
		
		print(tostring(PhoenixGlobalStorage["SavedAttachments"][tostring(Player.actor.activeWeapon)][self.pointIndex])) 
	end,

	OnClick = function (self)
		m_PhoenixAttachment.sfxSource.PlayOneShot(self.targets.sfx, 7)
	end,
}

function PF_AttachmentPoint:OnWeaponChange() AttachmentPointBase.OnWeaponChange(self) end
function PF_AttachmentPoint:OnClick() AttachmentPointBase.OnClick(self) end

function PF_AttachmentPoint:Initialise()
	self.targets.left.gameObject.GetComponent(Button).onClick.AddListener(self, "OnClick")
	self.targets.right.gameObject.GetComponent(Button).onClick.AddListener(self, "OnClick")
end

function PF_AttachmentPoint:Update()
	if self.weaponPoint == nil or not m_PhoenixAttachment.menuState then return end
	self.gameObject.transform.position = PlayerCamera.activeCamera.WorldToScreenPoint(self.weaponPoint.gameObject.transform.position)
end
