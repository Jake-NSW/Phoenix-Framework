-- Register the behaviour
behaviour("PF_AttachmentPoint")

local AttachmentPointBase = {
	EquipAttachment = function (self, attachmentIndex, animatorOnly)
		attachmentType = {
			["sights"] = function (self, attachment) -- Sights shiets
				local weapon = Player.actor.activeWeapon
				local attachmentData = attachment.gameObject.GetComponent(DataContainer)

				weapon.aimFov = attachmentData.GetFloat("aimFov")
			end,
		
			["muzzles"] = function (self, attachment) -- isLoud and muzzle flash visibilty
				local weapon = Player.actor.activeWeapon
				local attachmentData = attachment.gameObject.GetComponent(DataContainer)

				weapon.isLoud = not attachment.gameObject.GetComponent(DataContainer).GetBool("isSilent")
				weapon.gameObject.GetComponent(DataContainer).GetGameObject("muzzleFlash").SetActive(not attachmentData.GetBool("hideFlash"))

				-- Not needed cause of receiver system
				if weapon.gameObject.GetComponent(DataContainer).GetBool("useReceiverSystem") == true then
					m_PhoenixAttachment:RefreshReceiver(false, nil)
					return
				end

				weapon.gameObject.GetComponent(AudioSource).clip = attachmentData.GetAudioClip("FiringSound")
	
			end,
		
			["toggleableRail"] = function(self, attachment) -- Toggleable Rail, when pressing x it either enables or disables the rail power
			end,
		
			["stock"] = function (self, attachment) -- Changes recoil and aimin speed
				local weapon = Player.actor.activeWeapon
				local attachmentData = attachment.gameObject.GetComponent(DataContainer)

				weapon.recoilBaseKickback = attachmentData.GetFloat("kickback")
				weapon.recoilKickbackProneMultiplier = attachmentData.GetFloat("kickbackProneMultiplier")
				weapon.recoilRandomKickback = attachmentData.GetFloat("randomKick")
				weapon.recoilSnapDuration = attachmentData.GetFloat("snapDuration")
				weapon.recoilSnapFrequency = attachmentData.GetFloat("snapFrequency")
				weapon.recoilSnapMagnitude = attachmentData.GetFloat("snapMagnitude")
				weapon.recoilSnapProneMultiplier = attachmentData.GetFloat("snapProneMultiplier")

				m_PhoenixAttachment.statsRecoilSlider.value = attachmentData.GetInt("recoilStat")
		
			end,
		
			["underbarrel"] = function (self, attachment) -- Controls followup spread
				local weapon = Player.actor.activeWeapon
				local attachmentData = attachment.gameObject.GetComponent(DataContainer)
		
				--if self.script.mutator.GetConfigurationBool("bool_ChangeStats") then
					weapon.followupSpread.maxSpreadAim = attachmentData.GetFloat("maxSpreadAim")-- * selfVar.statsMulti
					weapon.followupSpread.maxSpreadHip = attachmentData.GetFloat("maxSpreadHip")-- * selfVar.statsMulti
					weapon.followupSpread.proneMultiplier = attachmentData.GetFloat("proneMultiplier")-- * selfVar.statsMulti
					weapon.followupSpread.spreadDissipateTime = attachmentData.GetFloat("spreadDissipateTime")-- * selfVar.statsMulti
					weapon.followupSpread.spreadGain = attachmentData.GetFloat("spreadGain")-- * selfVar.statsMulti
					weapon.followupSpread.spreadStayTime = attachmentData.GetFloat("spreadStayTime")-- * selfVar.statsMulti

					m_PhoenixAttachment.statsSpreadSlider.value = attachmentData.GetInt("spreadStat")
				--end
			end,
		
			["mag"] = function (self, attachment) -- Changes player movement speed and ammo count		
				local weapon = Player.actor.activeWeapon
				local attachmentData = attachment.gameObject.GetComponent(DataContainer)
		
				if keepAmmo then
					weapon.maxAmmo = attachmentData.GetFloat("magCapacity") --* self.statsMulti
					Player.actor.speedMultiplier = attachmentData.GetFloat("playerSpeedMultiplier") --* self.statsMulti
		
					if weapon.gameObject.GetComponent(DataContainer).GetBool("useReceiverSystem") == true then
						m_PhoenixAttachment:RefreshReceiver(true, attachmentData.GetGameObject("receiver").gameObject, self)
					end
					return
				end

				weapon.maxAmmo = attachmentData.GetFloat("magCapacity") --* self.statsMulti
				Player.actor.speedMultiplier = attachmentData.GetFloat("playerSpeedMultiplier") --* self.statsMulti
		
				-- MODUlAR ANIMATOR
				if weapon.gameObject.GetComponent(DataContainer).GetBool("useReceiverSystem") == true then
					m_PhoenixAttachment:RefreshReceiver(true, attachmentData.GetGameObject("receiver").gameObject, self)
					return
				end
			end,
		
			["skin"] = function (self, attachment) -- Changes weapon material... Will finish later, ITS NOT WORKING NOW??? GOTTA FIX IT
				local attachmentPoint = self.weaponPoint.gameObject.GetComponent(DataContainer)
				local attachmentData = attachment.gameObject.GetComponent(DataContainer)
		
				local rendererArray = attachmentPoint.GetGameObjectArray("mesh")
				local materialIndexArray = attachmentPoint.GetIntArray("meshMaterialIndex")
		
				local matArray = {}

				for i = 1, #rendererArray do
					local matIndex = materialIndexArray[i]
					local rendererComp = rendererArray[i].gameObject.GetComponent(Renderer)
		
					for i = 1, #rendererComp.materials + 1 do
						matArray[i] = attachmentPoint.GetMaterial("defaultMat")
					end
					matArray[matIndex] = attachmentData.GetMaterial("skin")

					rendererComp.materials = matArray
				end
			end,
		
			["receiver"] = function (self, attachment) -- Does nothing?
			end,
		
			["poop"] = function (self, attachment) -- Does nothing lol, stupid ass modder cant even set up an attachment correctly
			end,

			["nil"] = function (self) -- literally no way to get this
				print("how??")
			end,
		}
		-- Start Equip Attachment
		local data = self.weaponPoint.gameObject.GetComponent(DataContainer)
		local attachments = PhoenixData.GetGameObject(data, "attachment", true, nil)		
	
		-- Checks if the attachmentIndex is higher then the currnet ammount of attachments and if so sets attachmentIndex to 1
		if attachmentIndex > #attachments then
			attachmentIndex = 1
		end

		-- Visual stuff
		-- Disables old attachment
		attachments[_G.PhoenixGlobalStorage["SavedAttachments"][tostring(Player.actor.activeWeapon)][self.pointIndex]].gameObject.SetActive(false)
		
		-- Adds new attachment to storage
		_G.PhoenixGlobalStorage["SavedAttachments"][tostring(Player.actor.activeWeapon)][self.pointIndex] = attachmentIndex
		
		-- Enables new attachment
		attachments[attachmentIndex].gameObject.SetActive(true)

		local attachmentData = attachments[attachmentIndex].gameObject.GetComponent(DataContainer)
		local paramName = attachmentData.GetStringArray("animatorName")
		local paramValue = attachmentData.GetFloatArray("animatorValue")

		-- Applys stats and stuff
		if animatorOnly then
			self:ModularAnimator(paramName, paramValue)

			return
		else
			attachmentType[tostring(PhoenixData.GetString(data, "attachmentType", false, "poop"))](self, attachments[attachmentIndex].gameObject)
			self:ModularAnimator(paramName, paramValue)
		end
	end,

	OnWeaponChange = function (self)
		local bindTable = {
			["1"] = KeyCode.Alpha1,
			["2"] = KeyCode.Alpha2,
			["3"] = KeyCode.Alpha3,
			["4"] = KeyCode.Alpha4,
			["5"] = KeyCode.Alpha5,
			["6"] = KeyCode.Alpha6,
			["7"] = KeyCode.Alpha7,
			["8"] = KeyCode.Alpha8,
			["9"] = KeyCode.Alpha9,
			["0"] = KeyCode.Alpha0,
		}

		local flipped = PhoenixData.GetBool(self.weaponPoint.gameObject.GetComponent(DataContainer), "flipped", false, false)
		local pointData = self.weaponPoint.gameObject.GetComponent(DataContainer)

		if flipped then 
			PhoenixData.GetGameObject(self.targets.right.gameObject.GetComponent(DataContainer), "pointName", false, nil).gameObject.GetComponent(TextMeshProUGUI).text = "[".. tostring(PhoenixData.GetInt(pointData, "bind", false, 1)) .."] " .. PhoenixData.GetString(pointData, "pointName", false, "Yooo Setup ya gun")
			self.targets.left.gameObject.SetActive(false)
			self.targets.right.gameObject.SetActive(true)
		else
			PhoenixData.GetGameObject(self.targets.left.gameObject.GetComponent(DataContainer), "pointName", false, nil).gameObject.GetComponent(TextMeshProUGUI).text = PhoenixData.GetString(pointData, "pointName", false, "Yooo Setup ya gun") .. " [".. tostring(PhoenixData.GetInt(pointData, "bind", false, 1)) .."]"
			self.targets.left.gameObject.SetActive(true)
			self.targets.right.gameObject.SetActive(false)
		end

		self.bind = bindTable[tostring(PhoenixData.GetInt(pointData, "bind", false, 1))]
	end,

	OnClick = function (self)
		m_PhoenixAttachment.sfxSource.PlayOneShot(self.targets.sfx, 7)
	end,
}

function PF_AttachmentPoint:OnWeaponChange() AttachmentPointBase.OnWeaponChange(self) end
function PF_AttachmentPoint:OnClick() AttachmentPointBase.OnClick(self) end
function PF_AttachmentPoint:EquipAttachment(index, animatorOnly) AttachmentPointBase.EquipAttachment(self, index, animatorOnly) end

function PF_AttachmentPoint:ModularAnimator(paramName, paramValue)
	if paramName ~= nil and paramValue ~= nil then
		for i = 1, #paramName do

			Player.actor.activeWeapon.animator.SetFloat(paramName[i], paramValue[i])
		end
	else
		print("MODULAR ANIMATOR NIL -- FOR SOME REASON -- PROBABLY BECUASE YOU DIDNT SET THE VALUES CORRECTLY")
	end
end

function PF_AttachmentPoint:Initialise()
	self.targets.left.gameObject.GetComponent(Button).onClick.AddListener(self, "OnClick")
	self.targets.right.gameObject.GetComponent(Button).onClick.AddListener(self, "OnClick")
end

function PF_AttachmentPoint:Update()
	if self.weaponPoint == nil or not m_PhoenixAttachment.menuState then return end

	self.gameObject.transform.position = PlayerCamera.activeCamera.WorldToScreenPoint(self.weaponPoint.gameObject.transform.position)

	if Input.GetKeyDown(self.bind) then
		self:EquipAttachment(_G.PhoenixGlobalStorage["SavedAttachments"][tostring(Player.actor.activeWeapon)][self.pointIndex] + 1, false)
	end
end