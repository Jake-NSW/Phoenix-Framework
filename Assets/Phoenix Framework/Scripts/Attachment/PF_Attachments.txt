-- Register the behaviour
behaviour("PF_Attachments")

-- Local Tables
local AttachmentBase = {
	SetupKeybinds = function (self)
		self.attachmentKeybind = PhoenixInput.AttachmentMenuKeybind()
	end,

	CloneAttachmentPanel = function (self)

	end,

	SetupEvents = function (self)
		self.script.AddValueMonitor("ReturnIsPaused", "OnGamePaused")
	end,

	StoreComponents = function (self)
		self.transitionMultiplier = 1
		self.slowMotionMultiplier = 1

		self.menuUI = self.targets.MenuUI.gameObject.GetComponent(Animator)
		self.weaponNameText = self.targets.weaponNameText.gameObject.GetComponent(TextMeshProUGUI)
		self.historyHeaderText = self.targets.historyHeaderText.gameObject.GetComponent(TextMeshProUGUI)
		self.historyDescText = self.targets.historyDescText.gameObject.GetComponent(TextMeshProUGUI)
		self.statsHeaderText = self.targets.statsHeaderText.gameObject.GetComponent(TextMeshProUGUI)

		self.attachmentPointNest = self.targets.attachmentPointNest.gameObject.transform
		self.attachmentPointInstance = self.targets.attachmentPointInstance

		for i = 1, 10 do
			go = GameObject.Instantiate(self.attachmentPointInstance)
			go.transform.SetParent(self.attachmentPointNest, false)
		end
	end,

	PlayerStatusCheck = function (self)
		return Player.actor.activeWeapon.isReloading == false 
		and Player.actor.activeWeapon.isUnholstered == true 
		and Player.actor.isInWater == false 
		and Player.actor.isOnLadder == false 
		and GameManager.isPaused == false
	end,

	ToggleMenu = function (self, state)
		local MenuState = {
			["true"] = function (self)
				-- State
				self.menuState = true
				self.menuStateNumber = 1
				self.transitionMultiplier = 1
				
				-- Weapon Animations
				Player.actor.activeWeapon.animator.SetBool("customization", true)
				-- Player.actor.activeWeapon.gameObject.GetComponent(Animator).updateMode = AnimatorUpdateMode.UnscaledTime
				Player.actor.activeWeapon.LockWeapon()

				-- Changes time
				-- Time.timeScale = 0.03125
				Screen.UnlockCursor()

				-- Stupid gamehud stuff
				GameManager.hudGameModeEnabled = false
				GameManager.hudPlayerEnabled = false
			end,

			["false"] = function (self)
				self.menuState = false
				self.menuStateNumber = 0
				self.transitionMultiplier = 9.5

				-- Weapon Animations
				Player.actor.activeWeapon.animator.SetBool("customization", false)
				Player.actor.activeWeapon.gameObject.GetComponent(Animator).updateMode = AnimatorUpdateMode.Normal
				Player.actor.activeWeapon.UnlockWeapon()

				-- Changes time
				-- Time.timeScale = 1
				Screen.LockCursor()

				-- Stupid gamehud stuff
				if Player.actor == nil or Player.actor.isDead then return end
				GameManager.hudGameModeEnabled = true
				GameManager.hudPlayerEnabled = true
			end,
		}

		MenuState[tostring(state)](self)
	end,

	RefreshPoints = function (self, type)
		local typeSwitch = {
			["OnEnable"] = function (self)
				local data = Player.actor.activeWeapon.gameObject.GetComponentsInChildren(DataContainer)
				local dataIndex = 0
		
				for k,v in ipairs(data) do
					if PhoenixData.GetString(v, "dataType", false, "nahDontGotIt") == "attachmentPoint" then 
						if dataIndex == self.attachmentPointNest.childCount then return end
		
						-- Gets the UI (Framework) element for the point 
						local go = self.attachmentPointNest.GetChild(dataIndex).gameObject
						go.SetActive(true)
		
						-- Does point stuff
						local pointScript = self.script.GetScript(go.gameObject)
						pointScript.attachmentBase = self
						pointScript.weaponPoint = v.gameObject
						pointScript:OnWeaponChange()
		
						-- pluses the index
						dataIndex = 1 + dataIndex
					end
				end
			end,

			["OnDisable"] = function (self)
				for i = 1, self.attachmentPointNest.childCount do
					self.attachmentPointNest.GetChild(i - 1).gameObject.SetActive(false)
				end
			end,
		}

		typeSwitch[tostring(type)](self)
	end,
}

local AttachmentUI = {
	RefreshMenuText = function (self)
		local data = Player.actor.activeWeapon.gameObject.GetComponent(DataContainer)
		local weaponName = PhoenixData.GetString(data, "weaponName", false, "Cool Gun")


		if string.len(weaponName) >= 8 then
			self.weaponNameText.text = "<smallcaps>" .. weaponName .. "</smallcaps> <color=#808080ff><size=20>By: " .. PhoenixData.GetString(data, "creatorName", false, "Swag dude's gun")
		else
			self.weaponNameText.text = '<align="left"><smallcaps>' .. weaponName .. '</smallcaps>' .. '\n <align="right"><color=#808080ff><size=20>By: ' .. PhoenixData.GetString(data, "creatorName", false, "Swag dude's gun")
		end
		-- self.weaponNameText.text = "<smallcaps>" .. PhoenixData.GetString(data, "weaponName", false, "Cool Gun") .. "</smallcaps> <color=#808080ff><size=20>By: " .. PhoenixData.GetString(data, "creatorName", false, "Swag dude's gun")
		self.historyHeaderText.text = PhoenixData.GetString(data, "weaponHistoryTitle", false, "Cool Gun's History")
		self.historyDescText.text = PhoenixData.GetString(data, "weaponHistory", false, "This is a very cool gun")
		self.statsHeaderText.text = weaponName .. " Stats"
	end,
}

local AttachmentEvents = {
	OnPause = function (self, bool)
		local state = {
		["true"] = function (self) 
			AttachmentBase.ToggleMenu(self, false)
			self.menuUI.gameObject.SetActive(false)
			self.menuUI.gameObject.SetActive(true)
		end, 
		["false"] = function () end,
		}
	state[tostring(bool)](self)
	end,
}
function PF_Attachments:Initialise()
	AttachmentBase.SetupKeybinds(self)
	AttachmentBase.StoreComponents(self)
	AttachmentBase.SetupEvents(self)
	AttachmentBase.RefreshPoints(self, "OnDisable")

	PhoenixDebug.Print("PF_Attachments | Initialise", "log")
end

function PF_Attachments:Update()
	if Input.GetKeyBindButtonDown(KeyBinds.Slowmotion) and self.menuUI.GetFloat("State") ~= 1 then
		local SlowmoState = {
			["true"] = 0.2,
			["false"] = 1
		}

		self.isSlowMode = not self.isSlowMode
		self.slowMotionMultiplier = SlowmoState[tostring(self.isSlowMode)]
	end

	if not Player.actor.isDead and not GameManager.isPaused then
		self.menuUI.SetFloat("State", self.menuStateNumber, 0.2 / self.transitionMultiplier, Time.unscaledDeltaTime)
		Time.timeScale = PhoenixMath.Normalize(self.menuUI.GetFloat("State"), 1 , 0, 0.0325, 1 * self.slowMotionMultiplier)
	end
	
	if Input.GetKeyDown(self.attachmentKeybind) and AttachmentBase.PlayerStatusCheck() then
		AttachmentBase.ToggleMenu(self, not self.menuState)
	end

	if Input.GetKeyDown(KeyCode.Return) then 
		AttachmentBase.ToggleMenu(self, false)
	end
end

function PF_Attachments:OnDisable()
	if Player.actor == nil or Player.actor.isDead then return end
	AttachmentBase.ToggleMenu(self, false)
	AttachmentBase.RefreshPoints(self, "OnDisable")
	-- Slowmode stuff
	local SlowmoState = {
		["true"] = 0.2,
		["false"] = 1
	}
	Time.timeScale = SlowmoState[tostring(self.isSlowMode)]
end

function PF_Attachments:OnEnable()
	if Player.actor == nil or Player.actor.isDead  then return end

	Player.actor.activeWeapon.animator.SetBool("customization", false)
	Player.actor.activeWeapon.gameObject.GetComponent(Animator).updateMode = AnimatorUpdateMode.Normal

	AttachmentBase.ToggleMenu(self, false)
	AttachmentBase.RefreshPoints(self, "OnEnable")
	AttachmentUI.RefreshMenuText(self)

	-- Slowmode stuff
	if Time.timeScale <= 0.3 then self.isSlowMode = true else self.isSlowMode = false end

	local SlowmoState = {
		["true"] = 0.2,
		["false"] = 1
	}
	self.slowMotionMultiplier = SlowmoState[tostring(self.isSlowMode)]
end

function PF_Attachments:ReturnIsPaused() return GameManager.isPaused end

function PF_Attachments:OnGamePaused(bool) AttachmentEvents.OnPause(self, bool) end