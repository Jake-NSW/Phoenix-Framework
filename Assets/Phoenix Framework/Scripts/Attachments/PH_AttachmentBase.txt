-- Register the behaviour
behaviour("PH_AttachmentBase")

function PH_AttachmentBase:Start()
	-- Run when behaviour is created
	PhoenixAttachment.StoreComponents(self)
	print("poop")
	PhoenixAttachment.InitialSetup(self)
	PhoenixAttachment.DisableOnStart(self)
end

function PH_AttachmentBase:Update()
	if Input.GetKeyDown(KeyCode.T) then
		print(tostring(not self.menuActivated))
		PhoenixAttachment.ToggleAttachmentMenu(self, not self.menuActivated, 0.5)
	end
end

function PH_AttachmentBase:OnEnable()
	if not Player.actor.isDead then
		PhoenixAttachment.ToggleAttachmentMenu(self, false, -1)
		PhoenixAttachmentUI.RefreshText(self)
	end
end

function PH_AttachmentBase:OnDisable()



end

-- FUNCTIONS
PhoenixAttachment = {
	-- Stores all the components on start
	StoreComponents = function (self)
		_G.PhoenixDebug.SimplePrint("PH_AttachmentBase | Storing Components")

		-- Base Canvas
		self.UI_CanvasGroup = self.targets.UI_CanvasGroup.gameObject.GetComponent(Animator) -- Returns the Animator
		self.UI_Canvas = self.targets.UI_Canvas.gameObject.GetComponent(Canvas) -- Returns the Canvas
		self.UI_CanvasBack = self.targets.UI_CanvasBack.gameObject.GetComponent(Canvas) -- Returns Canvas

		-- Canvas Text
		self.UI_WeaponNameText = self.targets.UI_WeaponNameText.gameObject.GetComponent(TextMeshProUGUI) -- Returns the TextMeshPro Text
		self.UI_WeaponHistoryTitle = self.targets.UI_WeaponHistoryTitle.gameObject.GetComponent(TextMeshProUGUI) -- Returns the TextMeshPro Text
		self.UI_WeaponHistory = self.targets.UI_WeaponHistory.gameObject.GetComponent(TextMeshProUGUI)
		self.UI_WeaponProjectName = self.targets.UI_WeaponProjectName.gameObject.GetComponent(TextMeshProUGUI)
	end,

	-- Gets called on start, Basically the constructor
	InitialSetup = function (self)
		-- Sets up the UI_CanvasBack Stuff
		self.UI_CanvasBack.worldCamera = PlayerCamera.fpCamera
		self.UI_CanvasBack.planeDistance = 0.5
	end,

	-- Handles the rendering for the attachment menu
	ToggleAttachmentMenu = function (self, state, transTime)
		RenderState = {
			-- Does this if the state is == to true
			["true"] = function (self, transTime)
				self.menuActivated = true
				self.UI_CanvasGroup.SetFloat("activeSelf", 1, transTime, Time.deltaTime) -- Plays animation stuff
				_G.currentWeapon.animator.SetBool("customization", true) -- Sets the customization bool to true
				_G.currentWeapon.LockWeapon()

				GameManager.hudGameModeEnabled = false
				GameManager.hudPlayerEnabled = false

				_G.PhoenixDebug.BoolPrint("Attachment Menu Status", true) -- Debug prints that it actually finished it
			end,

			-- Does this if the state is == to false
			["false"] = function (self, transTime)
				self.menuActivated = false
				self.UI_CanvasGroup.SetFloat("activeSelf", 0, transTime, Time.deltaTime) -- Plays animation stuff
				_G.currentWeapon.animator.SetBool("customization", false) -- Sets the customization bool to false
				_G.currentWeapon.UnlockWeapon()

				_G.PhoenixDebug.BoolPrint("Attachment Menu Status", false) -- Debug prints that it actually finished it
			end,
		}

		-- Executes the actual render state
		RenderState[tostring(state)](self, transTime)
	end,

	-- Disables Objects on start
	DisableOnStart = function(self)

	end
}

PhoenixAttachmentUI = {
	-- Refreshes the attachment menu text
	RefreshText = function (self)
		local newWeaponName = _G.PhoenixData.GetString(_G.currentWeaponData, "weaponName", false, "#Weapon-Name", true, "warning", "Missing <color=#ffff00ff>'weaponName'</color> String!", "Make sure to have your <color=#ffff00ff>'weaponName'</color> on the base weapon's Data Container!")
		local newAuthorName = _G.PhoenixData.GetString(_G.currentWeaponData, "creatorName", false, "#Author-Name", true, "warning", "Missing <color=#ffff00ff>'creatorName'</color> String!", "Make sure to have your <color=#ffff00ff>'creatorName'</color> on the base weapon's Data Container!")
		local newHistoryTitle = _G.PhoenixData.GetString(_G.currentWeaponData, "weaponHistoryTitle", false, "#History-Title", true, "warning", "Missing <color=#ffff00ff>'weaponHistoryTitle'</color> String!", "Make sure to have your <color=#ffff00ff>'weaponHistoryTitle'</color> on the base weapon's Data Container!")
		local newHistoryDesc = _G.PhoenixData.GetString(_G.currentWeaponData, "weaponHistory", false, "#History-Description", true, "warning", "Missing <color=#ffff00ff>'weaponHistory'</color> String!", "Make sure to have your <color=#ffff00ff>'weaponHistory'</color> on the base weapon's Data Container!")
		local newProjectName = _G.PhoenixData.GetString(_G.currentWeaponData, "projectName", false, "#Project-Name", true, "warning", "Missing <color=#ffff00ff>'projectName'</color> String!", "Make sure to have your <color=#ffff00ff>'projectName'</color> on the base weapon's Data Container!")
		
		self.UI_WeaponNameText.text = "<color=#808080ff><size=32>Editing</size></color>\n" .. newWeaponName .. "<size=32> </size><size=16><color=#808080ff><align=right>By: " .. newAuthorName .. "</align></color></size>"
		self.UI_WeaponHistoryTitle.text = newHistoryTitle
		self.UI_WeaponHistory.text = newHistoryDesc
		self.UI_WeaponProjectName.text = "Weapon is a part of the " .. newProjectName
	end,
}