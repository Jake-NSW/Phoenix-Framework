-- Register the behaviour
behaviour("PH_AttachmentBase")

function PH_AttachmentBase:Start()

		self.StartFinished = true
		PhoenixAttachment.StoreComponents(self)
		PhoenixAttachment.InitialSetup(self)
		PhoenixAttachment.DisableOnStart(self)
end

function PH_AttachmentBase:Update()
	-- Checks if the player went into slowmotion, works but fucks up randomly which pisses me off
	--[[ if Input.GetKeyBindButtonDown(KeyBinds.Slowmotion) and self.UI_CanvasGroup.GetFloat("activeSelf") ~= 1 then
		SlowmoState = {
			["true"] = 0.2,
			["false"] = 1
		}
		self.slowMotionMultiplier = SlowmoState[tostring(self.isSlowMode)]
		self.isSlowMode = not self.isSlowMode
	end ]]

	-- Attachment Menu animator update update
	if not Player.actor.isDead and not GameManager.isPaused then
		self.UI_CanvasGroup.SetFloat("activeSelf", self.menuState, self.transitionTime / self.transitionMultiplier, Time.unscaledDeltaTime)

		-- Sets time lerpy stuff, works but fucks up randomly which pisses me off
		-- Time.timeScale = _G.PhoenixMath.Normalize(self.UI_CanvasGroup.GetFloat("activeSelf"), 1 , 0, 0.0325, 1 * self.slowMotionMultiplier)
	end

	-- Toggle the menu
	if Input.GetKeyDown(_G.PhoenixKeyBinds.AttachmentMenuKeybind()) and Player.actor.activeWeapon.isReloading == false and Player.actor.activeWeapon.isUnholstered == true and Player.actor.isInWater == false and Player.actor.isOnLadder == false and GameManager.isPaused == false then
		PhoenixAttachment.ToggleAttachmentMenu(self, not self.menuActivated, 5)
	end

end

function PH_AttachmentBase:OnWeaponSwitch()
	self.transitionTime = _G.PhoenixData.GetFloat(Player.actor.activeWeapon.gameObject.GetComponent(DataContainer), "transitionTime", false, 0.3, true, "warning", "Couldn't Find <color=#ffff00ff>'transitionTime'</color>", "Its not needed but if you want to have slower or faster attachment menu fade in change <color=#ffff00ff>'transitionTime'</color> on the base weapon's Data Container! The default value is '0.035'")
	PhoenixAttachmentUI.RefreshText(self)

	_G.PhoenixDebug.SimplePrint("PH_AttachmentBase | OnWeaponSwitch()")
end

function PH_AttachmentBase:OnDisable()
	if Player.actor ~= nil and not Player.actor.isDead and self.menuActivated then
		PhoenixAttachment.ToggleAttachmentMenu(self, false, 0) 
	end
end

-- FUNCTIONS
PhoenixAttachment = {
	-- Stores all the components on start
	StoreComponents = function (self)
		_G.PhoenixDebug.SimplePrint("PH_AttachmentBase | Storing Components")

		-- Base Canvas
		self.UI_CanvasGroup = self.targets.UI_CanvasGroup.gameObject.GetComponent(Animator) -- Returns the Animator
		self.UI_Canvas = self.targets.UI_Canvas.gameObject.GetComponent(Canvas) -- Returns the Canvas
		self.UI_CanvasBack = self.targets.UI_CanvasBack.gameObject.GetComponent(Canvas) -- Returns Canvas

		-- Canvas Text
		self.UI_WeaponNameText = self.targets.UI_WeaponNameText.gameObject.GetComponent(TextMeshProUGUI) -- Returns the TextMeshPro Text
		self.UI_WeaponHistoryTitle = self.targets.UI_WeaponHistoryTitle.gameObject.GetComponent(TextMeshProUGUI) -- Returns the TextMeshPro Text
		self.UI_WeaponHistory = self.targets.UI_WeaponHistory.gameObject.GetComponent(TextMeshProUGUI)
		self.UI_WeaponProjectName = self.targets.UI_WeaponProjectName.gameObject.GetComponent(TextMeshProUGUI)

		-- Attachment Panel
		self.UI_AttachmentPanelNest = self.targets.UI_AttachmentPanelNest.gameObject.transform
		self.GO_AttachmentPanel = self.targets.GO_AttachmentPanel
	end,

	-- Gets called on start, Basically the constructor
	InitialSetup = function (self)
		-- Sets up the UI_CanvasBack Stuff
		self.UI_CanvasBack.worldCamera = PlayerCamera.fpCamera
		self.UI_CanvasBack.planeDistance = 0.5

		-- Dunno sets up stuff xd
		self.menuState = 0
		self.transitionTime = 0.3
		self.transitionMultiplier = 1

		-- Sets up attachment panels
		for i = 1, 9 do
			local go = GameObject.Instantiate(self.GO_AttachmentPanel)
			go.transform.SetParent(self.UI_AttachmentPanelNest, false)
		end
	end,

	-- Handles the rendering for the attachment menu
	ToggleAttachmentMenu = function (self, state)	
		RenderState = {
			-- Does this if the state is == to true
			["true"] = function (self)
				-- Enables UI
				self.menuActivated = true
				self.menuState = 1
				self.transitionMultiplier = 1

				-- Current Weapon setup
				Player.actor.currentWeapon.animator.SetBool("customization", true) -- Sets the customization bool to true
				Player.actor.currentWeapon.gameObject.GetComponent(Animator).updateMode = AnimatorUpdateMode.UnscaledTime
				Player.actor.currentWeapon.LockWeapon()

				-- Changes time
				Time.timeScale = 0.03125
				Screen.UnlockCursor()

				-- Stupid gamehud stuff
				GameManager.hudGameModeEnabled = false
				GameManager.hudPlayerEnabled = false

				_G.PhoenixDebug.BoolPrint("Attachment Menu Status", true) -- Debug prints that it actually finished it
			end,

			-- Does this if the state is == to false
			["false"] = function (self)
				-- Enables UI
				self.menuActivated = false
				self.menuState = 0
				self.transitionMultiplier = 10
				-- self.UI_CanvasGroup.SetFloat("activeSelf", 0, 0.05, Time.deltaTime) -- Plays animation stuff

				-- Current Weapon setup
				Player.actor.currentWeapon.animator.SetBool("customization", false) -- Sets the customization bool to false
				Player.actor.currentWeapon.gameObject.GetComponent(Animator).updateMode = AnimatorUpdateMode.AnimatePhysics

				Player.actor.currentWeapon.UnlockWeapon()

				-- Changes time
				Time.timeScale = 1
				Screen.LockCursor()

				-- Stupid gamehud stuff
				GameManager.hudGameModeEnabled = true
				GameManager.hudPlayerEnabled = true

				_G.PhoenixDebug.BoolPrint("Attachment Menu Status", false) -- Debug prints that it actually finished it
			end,
		}

		-- Executes the actual render state
		RenderState[tostring(state)](self, transTime)
	end,

	-- Disables Objects on start
	DisableOnStart = function(self)

	end
}

PhoenixAttachmentUI = {
	-- Refreshes the attachment menu text
	RefreshText = function (self)
		local newWeaponName = _G.PhoenixData.GetString(Player.actor.activeWeapon.gameObject.GetComponent(DataContainer), "weaponName", false, "#Weapon-Name", true, "warning", "Missing <color=#ffff00ff>'weaponName'</color> String!", "Make sure to have your <color=#ffff00ff>'weaponName'</color> on the base weapon's Data Container!")
		local newAuthorName = _G.PhoenixData.GetString(Player.actor.activeWeapon.gameObject.GetComponent(DataContainer), "creatorName", false, "#Author-Name", true, "warning", "Missing <color=#ffff00ff>'creatorName'</color> String!", "Make sure to have your <color=#ffff00ff>'creatorName'</color> on the base weapon's Data Container!")
		local newHistoryTitle = _G.PhoenixData.GetString(Player.actor.activeWeapon.gameObject.GetComponent(DataContainer), "weaponHistoryTitle", false, "#History-Title", true, "warning", "Missing <color=#ffff00ff>'weaponHistoryTitle'</color> String!", "Make sure to have your <color=#ffff00ff>'weaponHistoryTitle'</color> on the base weapon's Data Container!")
		local newHistoryDesc = _G.PhoenixData.GetString(Player.actor.activeWeapon.gameObject.GetComponent(DataContainer), "weaponHistory", false, "#History-Description", true, "warning", "Missing <color=#ffff00ff>'weaponHistory'</color> String!", "Make sure to have your <color=#ffff00ff>'weaponHistory'</color> on the base weapon's Data Container!")
		local newProjectName = _G.PhoenixData.GetString(Player.actor.activeWeapon.gameObject.GetComponent(DataContainer), "projectName", false, newAuthorName .. " Collection", true, "warning", "Missing <color=#ffff00ff>'projectName'</color> String!", "Make sure to have your <color=#ffff00ff>'projectName'</color> on the base weapon's Data Container!")
		
		self.UI_WeaponNameText.text = "<color=#808080ff><size=32>Editing</size></color>\n" .. newWeaponName .. "<size=32> </size><size=16><color=#808080ff>By: " .. newAuthorName .. "</color></size>"
		self.UI_WeaponHistoryTitle.text = newHistoryTitle
		self.UI_WeaponHistory.text = newHistoryDesc
		self.UI_WeaponProjectName.text = "Weapon is a part of the " .. newProjectName
	end,
}