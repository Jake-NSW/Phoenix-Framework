-- Register the behaviour
behaviour("PH_Base")

function PH_Base:Start()
	_G.PhoenixBaseObject = self	-- Makes this object global

	-- Setup stuff
	PhoenixBase.SetupMutatorSettings(self)
	PhoenixBase.LoadAllScripts(self)
	PhoenixBase.StoreComponents(self)
	PhoenixBase.SetupEvents(self)
	PhoenixBase.SetupKeybinds(self)
end

-- Responsible for handling the print log, can be used on any script
_G.PhoenixDebug = {
	SimplePrint = function (printString)
		if printLog then
			print("<color=orange>Phoenix - </color>" .. tostring(printString))
		end
	end,

	BoolPrint = function (printString, state)
		if printLog then
			-- Changes the color depending on the bool value
			local PrintColorSwitch = {
				["true"] = " - <color=aqua>true</color>",
				["false"] = " - <color=yellow>false</color>"
			}
			-- Prints the string with the bool value
			print("<color=orange>Phoenix - </color>" .. tostring(printString) .. PrintColorSwitch[tostring(state)])		
		end
	end,

	ScreenPrint = function (type, headerText, descText)
		if consoleLog then
			iconType = {
				["warning"] = function () 
					return _G.PhoenixBaseObject.DEBUG_WarnIcon
				end,
				["error"] = function ()
					return _G.PhoenixBaseObject.DEBUG_ErrorIcon
				end
			}

			-- Assigns console listing stuff
			local go = GameObject.Instantiate(_G.PhoenixBaseObject.DEBUG_ConsoleListPrefab).gameObject
			go.transform.SetParent(_G.PhoenixBaseObject.DEBUG_ConsoleListNest, false)
			go.transform.SetAsFirstSibling()
			
			goData = go.GetComponent(DataContainer)
			goData.GetGameObject("icon").gameObject.GetComponent(Image).sprite = iconType[type]()
			goData.GetGameObject("title").gameObject.GetComponent(TextMeshProUGUI).text = headerText
			goData.GetGameObject("desc").gameObject.GetComponent(TextMeshProUGUI).text = descText
			goData.GetGameObject("errorNumber").gameObject.GetComponent(TextMeshProUGUI).text = tostring(_G.PhoenixBaseObject.DEBUG_ConsoleListNest.childCount)

			-- Ups the console count
			_G.PhoenixBaseObject.DEBUG_ConsoleCountText.text = tostring(_G.PhoenixBaseObject.DEBUG_ConsoleListNest.childCount)

			_G.PhoenixDebug.SimplePrint("Created Console Listing")
		end
	end,
}

-- Data Container Functions, made my own so I could add a nil check! 
-- I swear to god if someone says this is yandre dev code ima die... IT ISNT!!
_G.PhoenixData = {
	GetBool = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasBoolArray(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetBoolArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasBool(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetBool(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,

	GetString = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasStringArray(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetStringArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasString(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetString(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,

	GetFloat = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasFloatArray(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetFloatArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasFloat(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetFloat(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,

	GetInt = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasIntArray(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetIntArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasInt(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetInt(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,

	GetGameObject = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasGameObjectArray(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetGameObjectArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasGameObject(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetGameObject(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,

	GetSprite = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasSpriteArray(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetSpriteArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasSprite(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetSprite(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,

	GetAudioClip = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasAudioClipArray(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetAudioClipArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasAudioClip(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetAudioClip(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,
}

-- Base funcitons
PhoenixBase = {
	StoreComponents = function (self)
		-- Debug Stuff
		if consoleLog then
			local debugData = self.targets.SYS_Debug.gameObject.GetComponent(DataContainer) -- localised data container

			self.DEBUG_Console = debugData.GetGameObject("console").gameObject
			self.DEBUG_ClearConsoleButton = debugData.GetGameObject("clearConsoleButton").gameObject.GetComponent(Button) -- returns button
			self.DEBUG_ConsoleListNest = debugData.GetGameObject("consoleListNest").gameObject.transform -- returns transform
			self.DEBUG_ConsoleCountText = debugData.GetGameObject("consoleCount").gameObject.GetComponent(TextMeshProUGUI)
			self.DEBUG_ConsoleListPrefab = debugData.GetGameObject("consoleListPrefab") -- i dunno what to return kek

			self.DEBUG_WarnIcon = debugData.GetSprite("warnIcon")
			self.DEBUG_ErrorIcon = debugData.GetSprite("errorIcon")
		end

		_G.PhoenixDebug.SimplePrint("PH_Base | Storing Components")
	end,
	-- Assigns GameEventspt
	SetupEvents = function (self)
		self.script.AddValueMonitor("ReturnActiveWeapon", "OnWeaponSwitch")

		GameEvents.onActorSpawn.AddListener(self, "OnActorSpawn")
		GameEvents.onActorDied.AddListener(self, "OnActorDied")

		self.DEBUG_ClearConsoleButton.onClick.AddListener(self, "ClearConsole")

		_G.PhoenixDebug.SimplePrint("PH_Base | Setted up Events")
	end,

	-- Stores Mutator values
	SetupMutatorSettings = function (self)
		printLog = self.script.mutator.GetConfigurationBool("bool_printLog")
		consoleLog = self.script.mutator.GetConfigurationBool("bool_modderConsole")

		_G.PhoenixDebug.SimplePrint("PH_Base | Setted up Mutator Settings")
	end,

	SetupKeybinds = function (self)

	end,

	-- Loads all scripts, to prevent later overhead
	LoadAllScripts = function (self)

	end
}

PhoenixEvents = {
	OnPlayerSpawn = function (actor)
		print("player spawned :P")
	end,

	OnPlayerDeath = function (actor)
		print("player died :/")
	end,

	OnWeaponSwitch = function (self, newWeapon)
		-- global variable for active weapon stuff
		print("penis")
		_G.currentWeapon = newWeapon -- Returns weapon
		_G.currentWeaponData = newWeapon.gameObject.GetComponent(DataContainer) -- Returns a Data Container
	end,
}


-- Functions to assign events
-- OnActorSpawn, calls on actor spawn.. duhh
function PH_Base:OnActorSpawn(actor)
	if actor.isPlayer then
		PhoenixEvents.OnPlayerSpawn(actor)
	end

end
-- OnActorDied, calls when the actor dies of course
function PH_Base:OnActorDied(actor)
	if actor.isPlayer then
		PhoenixEvents.OnPlayerDeath(actor)
	end
end

-- OnWeaponSwitch, calls when the weapon switchs you dingus
function PH_Base:OnWeaponSwitch(newWeapon)
	PhoenixEvents.OnWeaponSwitch(self, newWeapon)
end

-- Returns the activeweapon, is for value monitor
function PH_Base:ReturnActiveWeapon()
	return Player.actor.activeWeapon
end

function PH_Base:ClearConsole()
	local consoleNest = self.DEBUG_ConsoleListNest
	for i = 1, consoleNest.childCount do
		local go = consoleNest.GetChild(i -1).gameObject
		GameObject.Destroy(go)
	end

	self.DEBUG_ConsoleCountText.text = "0"
end