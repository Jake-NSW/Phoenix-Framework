-- Register the behaviour
behaviour("PH_Base")

function PH_Base:Start()
	_G.PhoenixBaseObject = self	-- Makes this object global

	-- Setup stuff
	PhoenixBase.SetupMutatorSettings(self)
	PhoenixBase.StoreComponents(self)
	PhoenixBase.LoadAllScripts(self)
	PhoenixBase.SetupEvents(self)
end

function PH_Base:Update()
	-- Open and close the console
	if Input.GetKeyDown(KeyCode.BackQuote) and consoleLog then
		self.DEBUG_Console.SetActive(not self.DEBUG_Console.activeSelf)
	end
end

-- Responsible for handling the print log, can be used on any script
_G.PhoenixDebug = {
	SimplePrint = function (printString)
		if printLog then
			print("<color=orange>Phoenix - </color>" .. tostring(printString))
		end
	end,

	BoolPrint = function (printString, state)
		if printLog then
			-- Changes the color depending on the bool value
			local PrintColorSwitch = {
				["true"] = " - <color=aqua>true</color>",
				["false"] = " - <color=yellow>false</color>"
			}
			-- Prints the string with the bool value
			print("<color=orange>Phoenix - </color>" .. tostring(printString) .. PrintColorSwitch[tostring(state)])		
		end
	end,

	ScreenPrint = function (type, headerText, descText)
		if consoleLog then
			iconType = {
				["warning"] = function () 
					return _G.PhoenixBaseObject.DEBUG_WarnIcon
				end,
				["error"] = function ()
					return _G.PhoenixBaseObject.DEBUG_ErrorIcon
				end,
				["log"] = function ()
					return _G.PhoenixBaseObject.DEBUG_LogIcon
				end
			}

			-- Assigns console listing stuff
			local go = GameObject.Instantiate(_G.PhoenixBaseObject.DEBUG_ConsoleListPrefab).gameObject
			go.transform.SetParent(_G.PhoenixBaseObject.DEBUG_ConsoleListNest, false)
			go.transform.SetAsFirstSibling()
			
			goData = go.GetComponent(DataContainer)
			goData.GetGameObject("icon").gameObject.GetComponent(Image).sprite = iconType[type]()
			goData.GetGameObject("title").gameObject.GetComponent(TextMeshProUGUI).text = headerText
			goData.GetGameObject("desc").gameObject.GetComponent(TextMeshProUGUI).text = descText
			goData.GetGameObject("errorNumber").gameObject.GetComponent(TextMeshProUGUI).text = tostring(_G.PhoenixBaseObject.DEBUG_ConsoleListNest.childCount)

			-- Ups the console count
			_G.PhoenixBaseObject.DEBUG_ConsoleCountText.text = tostring(_G.PhoenixBaseObject.DEBUG_ConsoleListNest.childCount)
		end
	end,
}

-- Data Container Functions, made my own so I could add a nil check! 
-- I swear to god if someone says this is yandre dev code ima die... IT ISNT!!
_G.PhoenixData = {
	GetBool = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasBool(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetBoolArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasBool(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetBool(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,

	GetString = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasString(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetStringArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasString(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetString(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,

	GetFloat = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasFloat(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetFloatArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasFloat(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetFloat(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,

	GetInt = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasInt(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetIntArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasInt(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetInt(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,

	GetGameObject = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasObject(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetGameObjectArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasObject(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetGameObject(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,

	GetSprite = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasSprite(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetSpriteArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasSprite(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetSprite(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,

	GetAudioClip = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasAudioClip(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetAudioClipArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
				if dataContainer == nil or dataContainer.HasAudioClip(id) == false then
					if consoleWrite then
						_G.PhoenixDebug.ScreenPrint(consoleType, consoleHeader, consoleDescription)
					end
					return nilValue
				else
					return dataContainer.GetAudioClip(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue, consoleWrite, consoleType, consoleHeader, consoleDescription)
	end,
}

-- Keybinds
_G.PhoenixKeyBinds = {
	AttachmentMenuKeybind = function ()
		local KeybindList = {
			[0] = KeyCode.T,
			[1] = KeyCode.Y,
			[2] = KeyCode.U,
			[3] = KeyCode.H,
			[4] = KeyCode.G,
		}
		return KeybindList[_G.PhoenixBaseObject.attachmentMenuBindIndex]
	end,

	FiremodeKeybind = function ()
		local KeybindList = {
			[0] = KeyCode.X,
			[1] = KeyCode.Z,
		}
		return KeybindList[_G.PhoenixBaseObject.firemodeBindIndex]
	end,
}

-- Base funcitons
PhoenixBase = {
	-- Stores components to variables on start
	StoreComponents = function (self)
		-- Debug Stuff
		if consoleLog then
			local debugData = self.targets.SYS_Debug.gameObject.GetComponent(DataContainer) -- localised data container

			self.DEBUG_Console = debugData.GetGameObject("console").gameObject
			self.DEBUG_ClearConsoleButton = debugData.GetGameObject("clearConsoleButton").gameObject.GetComponent(Button) -- returns button
			self.DEBUG_ConsoleListNest = debugData.GetGameObject("consoleListNest").gameObject.transform -- returns transform
			self.DEBUG_ConsoleCountText = debugData.GetGameObject("consoleCount").gameObject.GetComponent(TextMeshProUGUI) -- returns text
			self.DEBUG_ConsoleListPrefab = debugData.GetGameObject("consoleListPrefab") -- i dunno what to return kek

			self.DEBUG_WarnIcon = debugData.GetSprite("warnIcon")
			self.DEBUG_ErrorIcon = debugData.GetSprite("errorIcon")
			self.DEBUG_LogIcon = debugData.GetSprite("logIcon")
		end

		self.SYS_Attachment = self.targets.SYS_Attachment.gameObject
		self.SYS_Inspect = self.targets.SYS_Inspect.gameObject
		self.SYS_AimReload = self.targets.SYS_AimReload.gameObject
		self.SYS_CameraAnim = self.targets.SYS_CameraAnim.gameObject
		self.SYS_Debug = self.targets.SYS_Debug.gameObject
		self.SYS_Storage = self.targets.SYS_Storage.gameObject

		_G.PhoenixDebug.SimplePrint("PH_Base | Storing Components")
	end,
	-- Assigns GameEventspt
	SetupEvents = function (self)
		self.script.AddValueMonitor("ReturnActiveWeapon", "OnWeaponSwitch")

		GameEvents.onActorSpawn.AddListener(self, "OnActorSpawn")
		GameEvents.onActorDied.AddListener(self, "OnActorDied")
		
		if consoleLog then
			self.DEBUG_ClearConsoleButton.onClick.AddListener(self, "ClearConsole")
		end
		
		_G.PhoenixDebug.SimplePrint("PH_Base | Setted up Events")
	end,

	-- Stores Mutator values
	SetupMutatorSettings = function (self)
		printLog = self.script.mutator.GetConfigurationBool("bool_printLog")
		consoleLog = self.script.mutator.GetConfigurationBool("bool_modderConsole")

		self.attachmentMenuBindIndex = 0
		self.firemodeBindIndex = 0

		_G.PhoenixDebug.SimplePrint("PH_Base | Setted up Mutator Settings")
	end,

	-- Loads all scripts, to prevent later overhead
	LoadAllScripts = function (self)
		_G.PhoenixDebug.SimplePrint("PH_Base | Started Loading Scripts")
		-- Enables gameObjects for loading scripts
		self.SYS_Attachment.SetActive(true)
		self.SYS_Attachment.gameObject.GetComponent(PH_AttachmentBase):Start() -- I HAVE NO FUCKING CLUE WHY I NEED TO DO THIS???

		self.SYS_Inspect.SetActive(true)
		self.SYS_AimReload.SetActive(true)
		self.SYS_CameraAnim.SetActive(true)
		self.SYS_Debug.SetActive(true)
		self.SYS_Storage.SetActive(true)

		_G.PhoenixDebug.SimplePrint("PH_Base | Finished Loading Scripts")
		-- Disables them
		self.SYS_Attachment.SetActive(false)
		self.SYS_Inspect.SetActive(false)
		self.SYS_AimReload.SetActive(false)
		self.SYS_CameraAnim.SetActive(false)
		_G.PhoenixDebug.SimplePrint("PH_Base | Cleaning up GameObject's")

		if consoleLog == false then
			_G.PhoenixDebug.SimplePrint("PH_Base | Debug is Enabled!")
			self.SYS_Debug.SetActive(false)
			return 
		end

		self.DEBUG_Console.SetActive(false)
	end,

	-- Sets up systems on weapon change
	ChangeSystem = function (self, newWeapon)
		local usePhoenixFramework = _G.PhoenixData.GetBool(_G.currentWeaponData, "usePhoenixFramework", false, false)

		self.SYS_Attachment.SetActive(false)
		self.SYS_Inspect.SetActive(false)
		self.SYS_AimReload.SetActive(false)
		self.SYS_CameraAnim.SetActive(false)

		if usePhoenixFramework then
			local useAttachmentSystem = _G.PhoenixData.GetBool(_G.currentWeaponData, "useAttachmentSystem", false, false)
			local useInspectAnimation = _G.PhoenixData.GetBool(_G.currentWeaponData, "useInspectAnimation", false, false)
			local useAimReload = _G.PhoenixData.GetBool(_G.currentWeaponData, "useAimReload", false, false)
			local useCameraAnimation = _G.PhoenixData.GetBool(_G.currentWeaponData, "useCameraAnimation", false, false)

			self.SYS_Attachment.SetActive(useAttachmentSystem)
			self.SYS_Inspect.SetActive(useInspectAnimation)
			self.SYS_AimReload.SetActive(useAimReload)
			self.SYS_CameraAnim.SetActive(useCameraAnimation)
			_G.PhoenixDebug.ScreenPrint("log", "The Player Just Switched Weapons!", "New Weapon - " .. newWeapon.weaponEntry.name .. "\nAttachment's - " .. tostring(useAttachmentSystem) .. "\nInspect Anim's - " .. tostring(useInspectAnimation) .. "\nAim Reload - " .. tostring(useAimReload) .. "\nCamera Anim's - " .. tostring(useCameraAnimation))
			return
		end

		_G.PhoenixDebug.ScreenPrint("log", "The Player Just Switched Weapons!", "New Weapon - " .. newWeapon.weaponEntry.name .. "\nPhoenix Compatible - " .. tostring(usePhoenixFramework))
	end,
}

PhoenixEvents = {
	OnPlayerSpawn = function (actor)
		_G.PhoenixDebug.ScreenPrint("log", "The Player Just Spawned!", "Back in the game baaabbyyyy")
	end,

	OnPlayerDeath = function (actor)
		_G.PhoenixDebug.ScreenPrint("log", "The Player Just Died!", "What a shame... what a rotten way to die...")
	end,

	OnWeaponSwitch = function (self, newWeapon)
		-- global variable for active weapon stuff
		_G.currentWeapon = newWeapon -- Returns weapon
		_G.currentWeaponData = newWeapon.gameObject.GetComponent(DataContainer) -- Returns a Data Container

		PhoenixBase.ChangeSystem(self, newWeapon)
	end,
}

-- Functions to assign events
-- OnActorSpawn, calls on actor spawn.. duhh
function PH_Base:OnActorSpawn(actor)
	if actor.isPlayer then
		PhoenixEvents.OnPlayerSpawn(actor)
	end

end
-- OnActorDied, calls when the actor dies of course
function PH_Base:OnActorDied(actor)
	if actor.isPlayer then
		PhoenixEvents.OnPlayerDeath(actor)
	end
end

-- OnWeaponSwitch, calls when the weapon switchs you dingus
function PH_Base:OnWeaponSwitch(newWeapon)
	if newWeapon == nil then
		return
	end
	PhoenixEvents.OnWeaponSwitch(self, newWeapon)
end

-- Returns the activeweapon, is for value monitor
function PH_Base:ReturnActiveWeapon()
	return Player.actor.activeWeapon
end

-- Clears all listings in the console
function PH_Base:ClearConsole()
	local consoleNest = self.DEBUG_ConsoleListNest
	for i = 1, consoleNest.childCount do
		local go = consoleNest.GetChild(i -1).gameObject
		GameObject.Destroy(go)
	end

	self.DEBUG_ConsoleCountText.text = "0"
end