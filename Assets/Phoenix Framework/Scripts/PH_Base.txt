-- Register the behaviour
behaviour("PH_Base")

function PH_Base:Start()
	_G.PhoenixBase = self

	PhoenixBase.StoreComponents(self)
	PhoenixBase.SetupEvents(self)
	PhoenixBase.SetupMutatorSettings(self)
	PhoenixBase.SetupKeybinds(self)
	PhoenixBase.LoadAllScripts(self)
end

-- Responsible for handling the print log, can be used on any script
_G.PhoenixDebug = {
	SimplePrint = function (printString)
		if printLog then
			print("<color=orange>Phoenix - </color>" .. tostring(printString))
		end
	end,

	BoolPrint = function (printString, state)
		if printLog then
			-- Changes the color depending on the bool value
			local PrintColorSwitch = {
				["true"] = " - <color=aqua>true</color>",
				["false"] = " - <color=yellow>false</color>"
			}
			-- Prints the string with the bool value
			print("<color=orange>Phoenix - </color>" .. tostring(printString) .. PrintColorSwitch[tostring(state)])		
		end
	end,

	ScreenPrint = function (type, headerText, descText)
		if consoleLog then
			iconType = {
				["warning"] = function () 
					return _G.PhoenixBase.DEBUG_WarnIcon
				end,
				["error"] = function ()
					return _G.PhoenixBase.DEBUG_ErrorIcon
				end
			}


		end
	end,
}

-- Data Container Functions, made my own so I could add a nil check!
_G.PhoenixData = {
	GetBool = function (dataContainer, id, isArray, nilValue)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetBoolArray(id) == nil then
					return nilValue
				else
					return dataContainer.GetBoolArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetBool(id) == nil then
					return nilValue
				else
					return dataContainer.GetBool(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue)
	end,

	GetString = function (dataContainer, id, isArray, nilValue)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetStringArray(id) == nil then
					return nilValue
				else
					return dataContainer.GetStringArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetString(id) == nil then
					return nilValue
				else
					return dataContainer.GetString(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue)
	end,

	GetFloat = function (dataContainer, id, isArray, nilValue)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetFloatArray(id) == nil then
					return nilValue
				else
					return dataContainer.GetFloatArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetFloat(id) == nil then
					return nilValue
				else
					return dataContainer.GetFloat(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue)
	end,

	GetInt = function (dataContainer, id, isArray, nilValue)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetIntArray(id) == nil then
					return nilValue
				else
					return dataContainer.GetIntArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetInt(id) == nil then
					return nilValue
				else
					return dataContainer.GetInt(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue)
	end,

	GetGameObject = function (dataContainer, id, isArray, nilValue)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetGameObjectArray(id) == nil then
					return nilValue
				else
					return dataContainer.GetGameObjectArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetGameObject(id) == nil then
					return nilValue
				else
					return dataContainer.GetGameObject(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue)
	end,

	GetSprite = function (dataContainer, id, isArray, nilValue)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetSpriteArray(id) == nil then
					return nilValue
				else
					return dataContainer.GetSpriteArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetSprite(id) == nil then
					return nilValue
				else
					return dataContainer.GetSprite(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue)
	end,

	GetAudioClip = function (dataContainer, id, isArray, nilValue)
		isArrayState = {
			["true"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetAudioClipArray(id) == nil then
					return nilValue
				else
					return dataContainer.GetAudioClipArray(id)
				end
			end,

			["false"] = function (dataContainer, id, isArray, nilValue)
				if dataContainer == nil or dataContainer.GetAudioClip(id) == nil then
					return nilValue
				else
					return dataContainer.GetAudioClip(id)
				end
			end,
		}
		return isArrayState[tostring(isArray)](dataContainer, id, isArray, nilValue)
	end,
}

-- Base funcitons
PhoenixBase = {
	StoreComponents = function (self)
		-- Debug Stuff
		self.DEBUG_ConsoleNest = self.targets.DEBUG_ConsoleNest.gameObject.transform -- Returns transform
		self.DEBUG_ConsoleCount = self.targets.DEBUG_ConsoleCount.gameObject.GetComponent(TextMeshProUGUI)
		self.DEBUG_ConsoleListingPrefab = self.targets.DEBUG_ConsoleListingPrefab.gameObject
		self.DEBUG_ClearConsoleButton = self.targets.DEBUG_ClearConsoleButton.gameObject
		self.DEBUG_WarnIcon = self.targets.DEBUG_WarnIcon.gameObject
		self.DEBUG_ErrorIcon = self.targets.DEBUG_ErrorIcon.gameObject
	end,
	-- Assigns GameEventspt
	SetupEvents = function (self)
		self.script.AddValueMonitor("ReturnActiveWeapon", "OnWeaponSwitch")
		self.script.AddDebugValueMonitor("ReturnActiveWeaponName", "Current Weapon", Color.yellow)

		GameEvents.onActorSpawn.AddListener(self, "OnActorSpawn")
		GameEvents.onActorDied.AddListener(self, "OnActorDied")
	end,

	-- Stores Mutator values
	SetupMutatorSettings = function (self)
		printLog = self.script.mutator.GetConfigurationBool("bool_printLog")
		consoleLog = self.script.mutator.GetConfigurationBool("bool_modderConsole")
	end,

	SetupKeybinds = function (self)

	end,

	-- Loads all scripts, to prevent later overhead
	LoadAllScripts = function (self)

	end
}

PhoenixEvents = {
	OnPlayerSpawn = function (actor)
		print("player spawned :P")
	end,

	OnPlayerDeath = function (actor)
		print("player died :/")
	end,

	OnWeaponSwitch = function (newWeapon)
		-- global variable for active weapon stuff
		_G.currentWeapon = newWeapon -- Returns weapon
		_G.currentWeaponData = newWeapon.gameObject.GetComponent(DataContainer) -- Returns a Data Container
	end,
}


-- Functions to assign events
-- OnActorSpawn, calls on actor spawn.. duhh
function PH_Base:OnActorSpawn(actor)
	if actor.isPlayer then
		PhoenixEvents.OnPlayerSpawn(actor)
	end

end
-- OnActorDied, calls when the actor dies of course
function PH_Base:OnActorDied(actor)
	if actor.isPlayer then
		PhoenixEvents.OnPlayerDeath(actor)
	end
end

-- OnWeaponSwitch, calls when the weapon switchs you dingus
function PH_Base:OnWeaponSwitch(newWeapon)
	PhoenixEvents.OnWeaponSwitch(newWeapon)
end

-- Returns the activeweapon, is for value monitor
function PH_Base:ReturnActiveWeapon()
	return Player.actor.activeWeapon
end

-- Returns the activeweapon's name, is for value monitor debug
function PH_Base:ReturnActiveWeaponName()
	if Player.actor.activeWeapon == nil then
		return "None Equiped"
	else
		local phoenix = _G.PhoenixData.GetBool(_G.currentWeaponData, "usePhoenixFramework", false, "false")
		local wep = Player.actor.activeWeapon
		return "Name - ".. wep.weaponEntry.name .. " | Phoenix - " .. tostring(phoenix)
	end
end
